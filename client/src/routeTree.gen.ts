/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedConversationsRouteImport } from './routes/_authenticated.conversations'
import { Route as AuthenticatedChatRouteImport } from './routes/_authenticated.chat'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedConversationsRoute =
  AuthenticatedConversationsRouteImport.update({
    id: '/conversations',
    path: '/conversations',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedChatRoute = AuthenticatedChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/chat': typeof AuthenticatedChatRoute
  '/conversations': typeof AuthenticatedConversationsRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/chat': typeof AuthenticatedChatRoute
  '/conversations': typeof AuthenticatedConversationsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/chat': typeof AuthenticatedChatRoute
  '/_authenticated/conversations': typeof AuthenticatedConversationsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/chat' | '/conversations'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/chat' | '/conversations'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/chat'
    | '/_authenticated/conversations'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/conversations': {
      id: '/_authenticated/conversations'
      path: '/conversations'
      fullPath: '/conversations'
      preLoaderRoute: typeof AuthenticatedConversationsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/chat': {
      id: '/_authenticated/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof AuthenticatedChatRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedChatRoute: typeof AuthenticatedChatRoute
  AuthenticatedConversationsRoute: typeof AuthenticatedConversationsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedChatRoute: AuthenticatedChatRoute,
  AuthenticatedConversationsRoute: AuthenticatedConversationsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
